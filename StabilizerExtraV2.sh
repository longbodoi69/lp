TMPFILE=$(mktemp) || exit 1
trap 'rm -f "$TMPFILE"' EXIT INT TERM
printf "%s" "#!/system/bin/sh
log_file="/data/local/tmp/log.txt"
now=$(date '+%Y-%m-%d %H:%M:%S')

if [ -f "$log_file" ]; then
    last_run=$(cat "$log_file")
    echo "Lần trước chạy module lúc: $last_run"
else
    echo "Hello"
fi

echo "$now" > "$log_file"
echo " *********************************"
echo " ########################"
echo " * ©Copyright By Long Phan"
echo " * Date: $(date) "
echo " * Country: VietNam🇻🇳"
echo " * PID: $$"
echo " * ID: $(id -u)"
echo " ########################"
    echo " *********************************"
echo "███████╗████████╗ █████╗ ██████╗ ██╗██╗     ██╗███████╗███████╗██████╗ ";
echo "██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██║██║     ██║╚══███╔╝██╔════╝██╔══██╗";
echo "███████╗   ██║   ███████║██████╔╝██║██║     ██║  ███╔╝ █████╗  ██████╔╝";
echo "╚════██║   ██║   ██╔══██║██╔══██╗██║██║     ██║ ███╔╝  ██╔══╝  ██╔══██╗";
echo "███████║   ██║   ██║  ██║██████╔╝██║███████╗██║███████╗███████╗██║  ██║";
echo "╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝╚══════╝╚═╝╚══════╝╚══════╝╚═╝  ╚═╝"
refresh_rate=$(dumpsys SurfaceFlinger | grep "refresh-rate" | awk '{printf("%d ", $3)}')
brand=$(getprop ro.product.system.brand)
storage=$(df /data | awk 'NR==2 { total=($2+$3)/1024/1024; used=$3/1024/1024; printf "%.2f / %.0f GB", used, total }')
echo " [+] Script Name: StabilizerExtraV2"
echo " [+] Refresh Rate: $refresh_rate Hz"
echo " [+] Brand: $brand"
echo " [+] Storage: $storage"
log() {
    prop=(
    "log.tag.FA WARN"
    "log.tag.AF::MmapTrack WARN"
    "log.tag.AF::OutputTrack WARN"
    "log.tag.AF::PatchRecord WARN"
    "log.tag.AF::PatchTrack WARN"
    "log.tag.AF::RecordHandle WARN"
    "log.tag.AF::RecordTrack WARN"
    "log.tag.AF::Track WARN"
    "log.tag.AF::TrackBase WARN"
    "log.tag.AF::TrackHandle WARN"
    "log.tag.APM-KpiMonitor WARN"
    "log.tag.APM-ServiceJ WARN"
    "log.tag.APM-SessionJ WARN"
    "log.tag.APM-SessionN WARN"
    "log.tag.APM-Subscriber WARN"
    "log.tag.APM::AudioCollections WARN"
    "log.tag.APM::AudioInputDescriptor WARN"
    "log.tag.APM::AudioOutputDescriptor WARN"
    "log.tag.APM::AudioPatch WARN"
    "log.tag.APM::AudioPolicyEngine WARN"
    "log.tag.APM::AudioPolicyEngine::Base WARN"
    "log.tag.APM::AudioPolicyEngine::Config WARN"
    "log.tag.APM::AudioPolicyEngine::ProductStrategy WARN"
    "log.tag.APM::AudioPolicyEngine::VolumeGroup WARN"
    "log.tag.APM::Devices WARN"
    "log.tag.APM::IOProfile WARN"
    "log.tag.APM::Serializer WARN"
    "log.tag.APM::VolumeCurve WARN"
    "log.tag.APM_AudioPolicyManager WARN"
    "log.tag.APM_ClientDescriptor WARN"
    "log.tag.AT WARN"
    "log.tag.AccountManager WARN"
    "log.tag.ActivityManager WARN"
    "log.tag.ActivityManagerService WARN"
    "log.tag.ActivityTaskManager WARN"
    "log.tag.ActivityTaskManagerService WARN"
    "log.tag.AdnRecord WARN"
    "log.tag.AdnRecordCache WARN"
    "log.tag.AdnRecordLoader WARN"
    "log.tag.AirplaneHandler WARN"
    "log.tag.AlarmManager WARN"
    "log.tag.AlarmManagerService WARN"
    "log.tag.AndroidRuntime WARN"
    "log.tag.AppOps WARN"
    "log.tag.AudioAttributes WARN"
    "log.tag.AudioEffect WARN"
    "log.tag.AudioFlinger WARN"
    "log.tag.AudioFlinger::DeviceEffectProxy WARN"
    "log.tag.AudioFlinger::DeviceEffectProxy::ProxyCallback WARN"
    "log.tag.AudioFlinger::EffectBase WARN"
    "log.tag.AudioFlinger::EffectChain WARN"
    "log.tag.AudioFlinger::EffectHandle WARN"
    "log.tag.AudioFlinger::EffectModule WARN"
    "log.tag.AudioFlinger_Threads WARN"
    "log.tag.AudioHwDevice WARN"
    "log.tag.AudioManager WARN"
    "log.tag.AudioPolicy WARN"
    "log.tag.AudioPolicyEffects WARN"
    "log.tag.AudioPolicyIntefaceImpl WARN"
    "log.tag.AudioPolicyManager WARN"
    "log.tag.AudioPolicyService WARN"
    "log.tag.AudioProductStrategy WARN"
    "log.tag.AudioRecord WARN"
    "log.tag.AudioService WARN"
    "log.tag.AudioSystem WARN"
    "log.tag.AudioTrack WARN"
    "log.tag.AudioTrackShared WARN"
    "log.tag.AudioVolumeGroup WARN"
    "log.tag.BackupManager WARN"
    "log.tag.BatteryManager WARN"
    "log.tag.BatteryStatsService WARN"
    "log.tag.BluetoothAdapter WARN"
    "log.tag.BluetoothDevice WARN"
    "log.tag.BluetoothGattService WARN"
    "log.tag.BluetoothHidService WARN"
    "log.tag.BluetoothManager WARN"
    "log.tag.BluetoothMapService WARN"
    "log.tag.BluetoothPanService WARN"
    "log.tag.BluetoothPbapService WARN"
    "log.tag.BluetoothSapService WARN"
    "log.tag.BluetoothService WARN"
    "log.tag.BluetoothSocket WARN"
    "log.tag.BufferQueueDump WARN"
    "log.tag.BufferQueueProducer WARN"
    "log.tag.C2K_AT WARN"
    "log.tag.C2K_ATConfig WARN"
    "log.tag.C2K_RILC WARN"
    "log.tag.CAM2PORT_ WARN"
    "log.tag.CapaSwitch WARN"
    "log.tag.CarrierExpressServiceImpl WARN"
    "log.tag.CarrierExpressServiceImplExt WARN"
    "log.tag.ClipboardManager WARN"
    "log.tag.ConnectivityManager WARN"
    "log.tag.ConnectivityService WARN"
    "log.tag.ConsumerIrService WARN"
    "log.tag.ContentManager WARN"
    "log.tag.CountryDetector WARN"
    "log.tag.DMC-ApmService WARN"
    "log.tag.DMC-Core WARN"
    "log.tag.DMC-DmcService WARN"
    "log.tag.DMC-EventsSubscriber WARN"
    "log.tag.DMC-ReqQManager WARN"
    "log.tag.DMC-SessionManager WARN"
    "log.tag.DMC-TranslatorLoader WARN"
    "log.tag.DMC-TranslatorUtils WARN"
    "log.tag.DSSelector WARN"
    "log.tag.DSSelectorOP01 WARN"
    "log.tag.DSSelectorOP02 WARN"
    "log.tag.DSSelectorOP09 WARN"
    "log.tag.DSSelectorOP18 WARN"
    "log.tag.DSSelectorOm WARN"
    "log.tag.DSSelectorUtil WARN"
    "log.tag.DataDispatcher WARN"
    "log.tag.DeviceIdleController WARN"
    "log.tag.DevicePolicyManager WARN"
    "log.tag.DevicePolicyManagerService WARN"
    "log.tag.DisplayManager WARN"
    "log.tag.DisplayManagerService WARN"
    "log.tag.DockObserver WARN"
    "log.tag.DownloadManager WARN"
    "log.tag.ExternalSimMgr WARN"
    "log.tag.FastCapture WARN"
    "log.tag.FastMixer WARN"
    "log.tag.FastMixerState WARN"
    "log.tag.FastThread WARN"
    "log.tag.FragmentManager WARN"
    "log.tag.FuseDaemon WARN"
    "log.tag.GAv4 WARN"
    "log.tag.GraphicsStats WARN"
    "log.tag.GsmCallTkrHlpr WARN"
    "log.tag.GsmCdmaConn WARN"
    "log.tag.GsmCdmaPhone WARN"
    "log.tag.HardwarePropertiesManager WARN"
    "log.tag.HardwareService WARN"
    "log.tag.IAudioFlinger WARN"
    "log.tag.IMSRILRequest WARN"
    "log.tag.IMS_RILA WARN"
    "log.tag.IccCardProxy WARN"
    "log.tag.IccPhoneBookIM WARN"
    "log.tag.IccProvider WARN"
    "log.tag.ImsApp WARN"
    "log.tag.ImsBaseCommands WARN"
    "log.tag.ImsCall WARN"
    "log.tag.ImsCallProfile WARN"
    "log.tag.ImsCallSession WARN"
    "log.tag.ImsEcbm WARN"
    "log.tag.ImsEcbmProxy WARN"
    "log.tag.ImsManager WARN"
    "log.tag.ImsPhone WARN"
    "log.tag.ImsPhoneBase WARN"
    "log.tag.ImsPhoneCall WARN"
    "log.tag.ImsService WARN"
    "log.tag.ImsVTProvider WARN"
    "log.tag.InputDispatcher WARN"
    "log.tag.InputManager WARN"
    "log.tag.InputManagerService WARN"
    "log.tag.InputMethodManager WARN"
    "log.tag.InputMethodManagerService WARN"
    "log.tag.InterfaceManager WARN"
    "log.tag.IsimFileHandler WARN"
    "log.tag.IsimRecords WARN"
    "log.tag.JobScheduler WARN"
    "log.tag.KeyguardManager WARN"
    "log.tag.LCM-Subscriber WARN"
    "log.tag.LIBC2K_RIL WARN"
    "log.tag.LocationManager WARN"
    "log.tag.LocationManagerService WARN"
    "log.tag.LocationProvider WARN"
    "log.tag.MAPI-CommandProcessor WARN"
    "log.tag.MAPI-MdiRedirector WARN"
    "log.tag.MAPI-MdiRedirectorCtrl WARN"
    "log.tag.MAPI-NetworkSocketConnection WARN"
    "log.tag.MAPI-SocketConnection WARN"
    "log.tag.MAPI-SocketListener WARN"
    "log.tag.MAPI-TranslatorManager WARN"
    "log.tag.MDM-Subscriber WARN"
    "log.tag.MTKSST WARN"
    "log.tag.MTK_APPList WARN"
    "log.tag.MediaPlayer WARN"
    "log.tag.MediaPlayerService WARN"
    "log.tag.MediaRouter WARN"
    "log.tag.MediaSession WARN"
    "log.tag.MipcEventHandler WARN"
    "log.tag.MountService WARN"
    "log.tag.MtkAdnRecord WARN"
    "log.tag.MtkCsimFH WARN"
    "log.tag.MtkEmbmsAdaptor WARN"
    "log.tag.MtkFactory WARN"
    "log.tag.MtkGsmCdmaConn WARN"
    "log.tag.MtkIccCardProxy WARN"
    "log.tag.MtkIccPHBIM WARN"
    "log.tag.MtkIccProvider WARN"
    "log.tag.MtkIccSmsInterfaceManager WARN"
    "log.tag.MtkImsManager WARN"
    "log.tag.MtkImsService WARN"
    "log.tag.MtkIsimFH WARN"
    "log.tag.MtkPhoneNotifr WARN"
    "log.tag.MtkPhoneNumberUtils WARN"
    "log.tag.MtkPhoneSwitcher WARN"
    "log.tag.MtkRecordLoader WARN"
    "log.tag.MtkRuimFH WARN"
    "log.tag.MtkSIMFH WARN"
    "log.tag.MtkSIMRecords WARN"
    "log.tag.MtkSmsCbHeader WARN"
    "log.tag.MtkSmsManager WARN"
    "log.tag.MtkSmsMessage WARN"
    "log.tag.MtkSpnOverride WARN"
    "log.tag.MtkSubCtrl WARN"
    "log.tag.MtkTelephonyManagerEx WARN"
    "log.tag.MtkUiccCard WARN"
    "log.tag.MtkUiccCardApp WARN"
    "log.tag.MtkUiccCtrl WARN"
    "log.tag.MtkUsimFH WARN"
    "log.tag.MtkUsimPhoneBookManager WARN"
    "log.tag.MwiRIL WARN"
    "log.tag.NetAgentService WARN"
    "log.tag.NetAgent_IO WARN"
    "log.tag.NetLnkEventHdlr WARN"
    "log.tag.NetworkManagement WARN"
    "log.tag.NetworkManagementService WARN"
    "log.tag.NetworkPolicy WARN"
    "log.tag.NetworkPolicyManagerService WARN"
    "log.tag.NetworkStats WARN"
    "log.tag.NetworkTimeUpdateService WARN"
    "log.tag.NotificationManager WARN"
    "log.tag.NotificationManagerService WARN"
    "log.tag.OperatorUtils WARN"
    "log.tag.PKM-Lib WARN"
    "log.tag.PKM-MDM WARN"
    "log.tag.PKM-Monitor WARN"
    "log.tag.PKM-SA WARN"
    "log.tag.PKM-Service WARN"
    "log.tag.PQ_DS WARN"
    "log.tag.PackageInstaller WARN"
    "log.tag.PackageManager WARN"
    "log.tag.PersistentDataBlockManager WARN"
    "log.tag.Phone WARN"
    "log.tag.PhoneConfigurationSettings WARN"
    "log.tag.PhoneFactory WARN"
    "log.tag.PowerHalAddressUitls WARN"
    "log.tag.PowerHalMgrImpl WARN"
    "log.tag.PowerHalMgrServiceImpl WARN"
    "log.tag.PowerHalWifiMonitor WARN"
    "log.tag.PowerManager WARN"
    "log.tag.PowerManagerService WARN"
    "log.tag.PrintManager WARN"
    "log.tag.ProcessStats WARN"
    "log.tag.ProxyController WARN"
    "log.tag.RFX WARN"
    "log.tag.RIL WARN"
    "log.tag.RIL-Fusion WARN"
    "log.tag.RIL-Netlink WARN"
    "log.tag.RIL-Parcel WARN"
    "log.tag.RIL-SocListen WARN"
    "log.tag.RIL-Socket WARN"
    "log.tag.RILC WARN"
    "log.tag.RILC-OP WARN"
    "log.tag.RILD WARN"
    "log.tag.RILMD2-SS WARN"
    "log.tag.RIL_UIM_SOCKET WARN"
    "log.tag.RadioManager WARN"
    "log.tag.RfxAction WARN"
    "log.tag.RfxBaseHandler WARN"
    "log.tag.RfxChannelMgr WARN"
    "log.tag.RfxCloneMgr WARN"
    "log.tag.RfxContFactory WARN"
    "log.tag.RfxController WARN"
    "log.tag.RfxDebugInfo WARN"
    "log.tag.RfxDisThread WARN"
    "log.tag.RfxFragEnc WARN"
    "log.tag.RfxHandlerMgr WARN"
    "log.tag.RfxIdToMsgId WARN"
    "log.tag.RfxIdToStr WARN"
    "log.tag.RfxMainThread WARN"
    "log.tag.RfxMclDisThread WARN"
    "log.tag.RfxMclMessenger WARN"
    "log.tag.RfxMclStatusMgr WARN"
    "log.tag.RfxMessage WARN"
    "log.tag.RfxObject WARN"
    "log.tag.RfxOpUtils WARN"
    "log.tag.RfxRilAdapter WARN"
    "log.tag.RfxRilUtils WARN"
    "log.tag.RfxRoot WARN"
    "log.tag.RfxStatusMgr WARN"
    "log.tag.RfxTimer WARN"
    "log.tag.RilClient WARN"
    "log.tag.RilOemClient WARN"
    "log.tag.RilOpProxy WARN"
    "log.tag.RmmCapa WARN"
    "log.tag.RmmCommSimOpReq WARN"
    "log.tag.RmmDcEvent WARN"
    "log.tag.RmmDcPdnManager WARN"
    "log.tag.RmmDcUrcHandler WARN"
    "log.tag.RmmDcUtility WARN"
    "log.tag.RmmEccNumberReqHdlr WARN"
    "log.tag.RmmEccNumberUrcHandler WARN"
    "log.tag.RmmEmbmsReq WARN"
    "log.tag.RmmEmbmsUrc WARN"
    "log.tag.RmmImsCtlReqHdl WARN"
    "log.tag.RmmImsCtlUrcHdl WARN"
    "log.tag.RmmMwi WARN"
    "log.tag.RmmNwAsyncHdlr WARN"
    "log.tag.RmmNwHdlr WARN"
    "log.tag.RmmNwNrtReqHdlr WARN"
    "log.tag.RmmNwRTReqHdlr WARN"
    "log.tag.RmmNwRatSwHdlr WARN"
    "log.tag.RmmNwReqHdlr WARN"
    "log.tag.RmmNwUrcHdlr WARN"
    "log.tag.RmmOemHandler WARN"
    "log.tag.RmmOpRadioReq WARN"
    "log.tag.RmmPhbReq WARN"
    "log.tag.RmmPhbUrc WARN"
    "log.tag.RmmRadioReq WARN"
    "log.tag.RmmSimBaseHandler WARN"
    "log.tag.RmmSimCommReq WARN"
    "log.tag.RmmSimCommUrc WARN"
    "log.tag.RmmWp WARN"
    "log.tag.RtmCapa WARN"
    "log.tag.RtmCommSimCtrl WARN"
    "log.tag.RtmDC WARN"
    "log.tag.RtmEccNumberController WARN"
    "log.tag.RtmEmbmsAt WARN"
    "log.tag.RtmEmbmsUtil WARN"
    "log.tag.RtmIms WARN"
    "log.tag.RtmImsConference WARN"
    "log.tag.RtmImsConfigController WARN"
    "log.tag.RtmImsDialog WARN"
    "log.tag.RtmModeCont WARN"
    "log.tag.RtmMwi WARN"
    "log.tag.RtmNwCtrl WARN"
    "log.tag.RtmPhb WARN"
    "log.tag.RtmRadioConfig WARN"
    "log.tag.RtmRadioCont WARN"
    "log.tag.RtmWp WARN"
    "log.tag.SIMRecords WARN"
    "log.tag.SQLiteQueryBuilder WARN"
    "log.tag.SensorManager WARN"
    "log.tag.ServiceManager WARN"
    "log.tag.SimSwitchOP01 WARN"
    "log.tag.SimSwitchOP02 WARN"
    "log.tag.SimSwitchOP18 WARN"
    "log.tag.SlotQueueEntry WARN"
    "log.tag.SpnOverride WARN"
    "log.tag.StatusBarManagerService WARN"
    "log.tag.StorageManager WARN"
    "log.tag.SurfaceFlinger WARN"
    "log.tag.SystemServer WARN"
    "log.tag.Telecom WARN"
    "log.tag.TelephonyManager WARN"
    "log.tag.TelephonyRegistry WARN"
    "log.tag.ThermalManager WARN"
    "log.tag.ToneGenerator WARN"
    "log.tag.UiccCard WARN"
    "log.tag.UiccController WARN"
    "log.tag.UsbHostManager WARN"
    "log.tag.UsbManager WARN"
    "log.tag.UxUtility WARN"
    "log.tag.VT WARN"
    "log.tag.VibratorService WARN"
    "log.tag.VpnManager WARN"
    "log.tag.VsimAdaptor WARN"
    "log.tag.WORLDMODE WARN"
    "log.tag.WallpaperManager WARN"
    "log.tag.WfoApp WARN"
    "log.tag.WifiManager WARN"
    "log.tag.WindowManager WARN"
    "log.tag.WindowManagerService WARN"
    "log.tag.WpfaCcciDataHeaderEncoder WARN"
    "log.tag.WpfaCcciReader WARN"
    "log.tag.WpfaCcciSender WARN"
    "log.tag.WpfaControlMsgHandler WARN"
    "log.tag.WpfaDriver WARN"
    "log.tag.WpfaDriverAccept WARN"
    "log.tag.WpfaDriverAdapter WARN"
    "log.tag.WpfaDriverDeReg WARN"
    "log.tag.WpfaDriverMessage WARN"
    "log.tag.WpfaDriverRegFilter WARN"
    "log.tag.WpfaDriverULIpPkt WARN"
    "log.tag.WpfaDriverUtilis WARN"
    "log.tag.WpfaDriverVersion WARN"
    "log.tag.WpfaFilterRuleReqHandler WARN"
    "log.tag.WpfaParsing WARN"
    "log.tag.WpfaRingBuffer WARN"
    "log.tag.WpfaRuleContainer WARN"
    "log.tag.WpfaRuleRegister WARN"
    "log.tag.WpfaShmAccessController WARN"
    "log.tag.WpfaShmReadMsgHandler WARN"
    "log.tag.WpfaShmSynchronizer WARN"
    "log.tag.WpfaShmWriteMsgHandler WARN"
    "log.tag.brevent.event WARN"
    "log.tag.libPowerHal WARN"
    "log.tag.libfuse WARN"
    "log.tag.mipc_lib WARN"
    "log.tag.mtkpower@impl WARN"
    "log.tag.mtkpower_client WARN"
    "log.tag.trm_lib WARN"
    "log.tag.wpfa_iptable_android WARN"
    "log.tag.Networklogger WARN"
    "log.tag.AudioFlinger::DeviceEffectProxy WARN"
    )
    for commands in "${disable_log[@]}"; do
    IFS=' ' read -r name value <<< "$commands"
    setprop "$name" "$value"
done
}
apply_properties() {
    set_prop=(
        "debug.sf.hw 1"
        "debug.egl.hw 1"
        "debug.perf.tuning 1"
        "debug.sf.frame_rate_multiple_threshold 999"
        "debug.sf_frame_rate_multiple_fences 999"
        "debug.hwui.target_gpu_time_percent 100"
        "debug.hwui.target_cpu_time_percent 100"
        "debug.sf.enable_gl_backpressure 1"
        "debug.sf.disable_backpressure 1"
        "debug.performance.tuning 1"
        "debug.sf.use_frame_rate_priority 1"
        "debug.graphics.game_default_frame_rate.disabled true"
    )
    vsync=(
        "debug.egl.swapinterval 0"
        "debug.gr.swapinterval 0"
        "debug.sf.swapinterval 0"
    )
    limit=(
        "thermal_limit_refresh_rate 1"
        "fps_limit 0"
    )
    glob=(
        "force_gpu_rendering 1"
        "GPUTUNER_SWITCH true"
        "CPUTUNER_SWITCH true"
        "DYNAMIC_PERFORMANCE_DEFAULT_STATUS 1"
        "DYNAMIC_PERFORMANCE_STATUS 1"
        "low_power 0"
        "miui_cpu_model 2"
        "cached_apps_freezer enable"
    )
    overlay=(
        "game_overlay com.dts.freefireth mode=2,angle=true,fps=$refresh_rate,loadingBoost=999999999"
        "game_overlay com.dts.freefiremax mode=2,angle=true,fps=$refresh_rate,loadingBoost=999999999"
    )
    optimal=(
        "dalvik.vm.checkjni 0"
        "dalvik.vm.dex2oat-minidebuginfo false"
        "dalvik.vm.minidebuginfo false"
        "dalvik.vm.useartservice true"
        "dalvik.vm.usejit true"
    )
    secure=(
        "long_press_timeout 200"
        "multi_press_timeout 200"
        "game_auto_temperature 0"
        "game_dashboard_always_on 1"
        "high_priority 1"
    )
    msaa=(
        "debug.egl.force_msaa 0"
        "debug.hwui.force_fxaa 0" 
        "debug.hwui.force_smaa 0" 
        "debug.hwui.force_msaa 0" 
        "debug.hwui.force_txaa 0" 
        "debug.hwui.force_csaa 0" 
        "debug.hwui.force_dlss 0" 
        "debug.sf.showupdates 0"
        "debug.sf.showfps 0"
        "debug.sf.showcpu 0"
        "debug.sf.showbackground 0"
    )
    cmd=(
        "set-adaptive-power-saver-enabled false"
        "set-fixed-performance-mode-enabled true"
        "set-mode 0"
    )
    am=(
        "clear-debug-app all"
        "clear-exit-info all"
        "clear-watch-heap all"
    )
logcat=$(getprop dalvik.vm.dex2oat-Xms)    
if [ -n "$logcat" ]; then
    logcat -G "$logcat"
else
    logcat -G 256K
    logcat -c 
    fi
    
if [ -n "$(getprop ro.hardware.vulkan)" ]; then
    renderer="skiavk" 
else
    renderer="skiagl"
fi

setprop debug.hwui.renderer "$renderer"
setprop debug.renderengine.backend skiagputhreaded

    for commands in "${set_prop[@]}"; do
    IFS=' ' read -r key value <<< "$commands"
    setprop "$key" "$value"
done
    for commands in "${vsync[@]}"; do
    IFS=' ' read -r key value <<< "$commands"
    setprop "$key" "$value"
done
    for commands in "${limit[@]}"; do
    IFS=' ' read -r key value <<< "$commands"
    settings put system "$key" "$value"
done
    for commands in "${glob[@]}"; do
    IFS=' ' read -r name value <<< "$commands"
    settings put global "$name" "$value"
done
    for commands in "${overlay[@]}"; do
    IFS=' ' read -r namespace key value <<< "$commands"
    device_config put "$namespace" "$key" "$value"
done
    for commands in "${optimal[@]}"; do
    IFS=' ' read -r name value <<< "$commands"
    setprop "$name" "$value"
done
    for commands in "${secure[@]}"; do
    IFS=' ' read -r name value <<< "$commands"
    settings put secure "$name" "$value"
done
    for commands in "${msaa[@]}"; do
    IFS=' ' read -r name value <<< "$commands"
    settings put global "$name" "$value"
done
    for commands in "${cmd[@]}"; do
    IFS=' ' read -r key value <<< "$commands"
    cmd power "$key" "$value"
done
    for commands in "${am[@]}"; do
    IFS=' ' read -r key value <<< "$commands"
    am "$key" "$value"
done
}
am kill-all
log > /dev/null 2>&1
apply_properties > /dev/null 2>&1

for i in $(seq 1 7); do
  echo -ne "System loading.\  \r"
  sleep 1
  echo -ne "System loading./ \r"
  sleep 1
done
echo " System Installed Successfully"
" | base64 -d > "$TMPFILE"
chmod +x "$TMPFILE"
sh "$TMPFILE"
